using Dapper;
using FluentAssertions;
using Npgsql;
using NUnit.Framework;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using System.Transactions;
using Testcontainers.PostgreSql;
using IsolationLevel = System.Transactions.IsolationLevel;

namespace ReadCommitted.Tests;

[TestFixture]
public class DatabaseTests
{

    #region sql

    private const string _createTableQuery = @"
create table if not exists accounts (
    id     integer primary key generated by default as identity,
    client text,
    amount numeric
);";

    private const string _insertDataToTablesQuery = @"
insert into accounts
values
    (1, 'alice', 1000.00),
    (2, 'bob', 100.00),
    (3, 'bob', 900.00);
";


    private const string _clearDataFromTablesQuery = @"truncate table accounts restart identity";

    #endregion sql 

    private IDbConnection _dbconnection;

    private PostgreSqlContainer _postgresContainer;
    private string _connectionString;

    [OneTimeSetUp]
    public async Task OneTimeSetUpAsync()
    {
        _postgresContainer = new PostgreSqlBuilder()
            .WithDatabase("testdb")
            .WithUsername("postgres")
            .WithPassword("password")
            .Build();

        await _postgresContainer.StartAsync();

        _connectionString = _postgresContainer.GetConnectionString();

        _dbconnection = new NpgsqlConnection(_connectionString);

        await _dbconnection.ExecuteAsync(_createTableQuery);
        await _dbconnection.ExecuteAsync(_insertDataToTablesQuery);
    }

    [OneTimeTearDown]
    public async Task OneTimeTearDownAsync()
    {
        if(_dbconnection != null)
        {

            await _dbconnection.ExecuteAsync(_clearDataFromTablesQuery);
            _dbconnection.Close();
            _dbconnection.Dispose();
        }
        if(_postgresContainer != null)
        {
            await _postgresContainer.StopAsync();
            await _postgresContainer.DisposeAsync();
        }
    }

    record class Account(int Id, string Client, decimal Amount);

    [Test]
    public void Test_DirtyRead1()
    {
        var alice800 = new List<Account>() { new(1, "alice", 800) };
        var alice1000 = new List<Account>() { new(1, "alice", 1000) };

        var task1 = Task.Run(async () =>
        {
            using var transaction = new TransactionScope(scopeOption: TransactionScopeOption.Required, transactionOptions: new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted, Timeout =  TransactionManager.DefaultTimeout});
            await Task.Delay(10);
            var retrievedData = await _dbconnection.QueryAsync<Account>(@"select * from accounts where client = 'alice';");
            retrievedData.Should().BeEquivalentTo(alice1000, options => options.WithStrictOrdering());
            transaction.Complete();
        });

        var task2 = Task.Run(async () =>
        {
            using var transaction = new TransactionScope(scopeOption: TransactionScopeOption.Required, transactionOptions: new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted, Timeout =  TransactionManager.DefaultTimeout});
            var retrievedData = await _dbconnection.QueryAsync<Account>(@"
update accounts set amount = amount - 200 where id = 1;
select * from accounts where client = 'alice';");
            retrievedData.Should().BeEquivalentTo(alice800, options => options.WithStrictOrdering());
            await Task.Delay(40);
            transaction.Complete();
        });

        Task.WhenAll(task1, task2);
    }

    [Test]
    public void Test_DirtyRead2()
    {
        var alice1000 = new List<Account>() { new(1, "alice", 1000) };

        var t1 = new Thread(() =>
        {
            using var transaction = new TransactionScope(scopeOption: TransactionScopeOption.Required, transactionOptions: new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted, Timeout =  TransactionManager.DefaultTimeout});
            _dbconnection.Query<Account>(@"update accounts set amount = amount - 200 where id = 1;");
            Thread.Sleep(100);
            transaction.Complete();
        })
        {
            IsBackground = false
        };
        t1.Start();

        var t2 = new Thread(() =>
        {
            using var transaction = new TransactionScope(scopeOption: TransactionScopeOption.Required, transactionOptions: new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted, Timeout =  TransactionManager.DefaultTimeout});
            var retrievedData = _dbconnection.Query<Account>(@"select * from accounts where client = 'alice';");
            retrievedData.Should().BeEquivalentTo(alice1000, options => options.WithStrictOrdering());
            transaction.Complete();
        })
        {
            IsBackground = false
        };
        t2.Start();

        t1.Join();
        t2.Join();
    }
}


