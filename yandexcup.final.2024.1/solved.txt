
using System;
using System.Collections.Generic;

namespace yandexcupfinal20241;

class Artifact
{
    public string Id;
    public List<string> Parts;
    public Artifact Parent;

    public Artifact(string id)
    {
        Id = id;
        Parts = new List<string>();
        Parent = null;
    }

    public Artifact FindRoot()
    {
        if(Parent == null)
        {
            return this;
        }
        else
        {
            Parent = Parent.FindRoot();
            return Parent;
        }
    }
}

class Solution
{
    static void Main(string[] args)
    {
        var artifacts = new Dictionary<string, Artifact>();
        var partToArtifact = new Dictionary<string, Artifact>();
        int artifactCounter = 1;

        while(true)
        {
            string line = Console.ReadLine();
            if(line == null) break;
            string[] tokens = line.Split();
            if(tokens.Length == 0) continue;

            string command = tokens[0];

            if(command == "EXIT")
            {
                break;
            }
            else if(command == "CREATE")
            {
                string partId = tokens[1];
                if(partToArtifact.ContainsKey(partId))
                {
                    Console.WriteLine("ERROR: EXISTING PART");
                }
                else
                {
                    string artifactId = "a" + artifactCounter++;
                    Artifact artifact = new Artifact(artifactId);
                    artifact.Parts.Add(partId);
                    partToArtifact[partId] = artifact;
                    artifacts[artifactId] = artifact;
                    Console.WriteLine(artifactId);
                }
            }
            else if(command == "MERGE")
            {
                string artifactId1 = tokens[1];
                string artifactId2 = tokens[2];

                if(!artifacts.ContainsKey(artifactId1) || !artifacts.ContainsKey(artifactId2))
                {
                    continue;
                }

                Artifact artifact1 = artifacts[artifactId1];
                Artifact artifact2 = artifacts[artifactId2];

                if(artifact1.Parent != null || artifact2.Parent != null)
                {
                    continue;
                }

                Artifact root1 = artifact1.FindRoot();
                Artifact root2 = artifact2.FindRoot();

                string newArtifactId = "a" + artifactCounter++;
                Artifact newArtifact = new Artifact(newArtifactId);

                root1.Parent = newArtifact;
                root2.Parent = newArtifact;

                newArtifact.Parts = new List<string>(root1.Parts.Count + root2.Parts.Count);
                newArtifact.Parts.AddRange(root1.Parts);
                newArtifact.Parts.AddRange(root2.Parts);

                foreach(string partId in root1.Parts)
                {
                    partToArtifact[partId] = newArtifact;
                }
                foreach(string partId in root2.Parts)
                {
                    partToArtifact[partId] = newArtifact;
                }

                artifacts.Remove(root1.Id);
                artifacts.Remove(root2.Id);

                artifacts[newArtifactId] = newArtifact;
                Console.WriteLine(newArtifactId);
            }
            else if(command == "GET_PARTS")
            {
                string artifactId = tokens[1];
                if(!artifacts.ContainsKey(artifactId))
                {
                    Console.WriteLine("ERROR: NO SUCH ARTEFACT");
                }
                else
                {
                    Artifact artifact = artifacts[artifactId];
                    if(artifact.Parent != null)
                    {
                        Console.WriteLine("ERROR: NO SUCH ARTEFACT");
                    }
                    else
                    {
                        Artifact rootArtifact = artifact.FindRoot();
                        Console.WriteLine(string.Join(" ", rootArtifact.Parts));
                    }
                }
            }
        }
    }
}
